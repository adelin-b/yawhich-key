#!/bin/bash
# set -x
set -e
set -u

# Get script directory
cwd=$(echo $(dirname $0))
# install_dir=$(echo $(dirname $0))

# User config
config_dir=${XDG_CONFIG_HOME:=$HOME/.config/yawhich-key}

if [[ -e $config_dir ]]; then
 cwd=$config_dir
else
  notify-send "yawhich-key" "No config folder detected, you should create one"
fi


# This can be using in the command evaluation
# shellcheck disable=2034
terminal=$( yq r - commands.terminal < "$config_dir/config.yaml" )
# shellcheck disable=2034
terminal_hold=$( yq r - commands.terminal_hold < "$config_dir/config.yaml" )
# shellcheck disable=2034
file_manager=$( yq r - commands.file_manager < "$config_dir/config.yaml" )
# shellcheck disable=2034
music=$( yq r - commands.music < "$config_dir/config.yaml" )
# shellcheck disable=2034
editor=$( yq r - commands.editor < "$config_dir/config.yaml" )
# shellcheck disable=2034
editor_goto_line=$( yq r - commands.editor_goto_line < "$config_dir/config.yaml" )
# shellcheck disable=2034
rofi_options=$( yq r - property.rofi_options < "$config_dir/config.yaml" )
color_primary=$( yq r - property.color_primary < "$config_dir/config.yaml" )
color_secondary=$( yq r - property.color_secondary < "$config_dir/config.yaml" )
theme="$config_dir/$( yq r - property.theme < "$config_dir/config.yaml")"
layers=$( yq r - property.layers < "$config_dir/config.yaml" )

echoerr() { echo "$@" 1>&2; }
if [ -z "${BROWSER-}" ]; then
  browser=$( yq r - commands.browser < "$config_dir/config.yaml" )
  message="no BROWSER env variable found, consider putting it your profile https://wiki.archlinux.org/index.php/Environment_variables\n\nDefaulting to $browser "
  # notify-send "yawhich-key" "$message"
else
  browser=$BROWSER
fi



YAWHICHKEY_THEMER_FILE=${YAWHICHKEY_THEMER_FILE:=~/.config/themer/current/colors.yaml}
YAWHICHKEY_PYWAL_FILE=${YAWHICHKEY_PYWAL_FILE:=~/.cache/wal/colors}
YAWHICHKEY_COLOR_PREFIX=${YAWHICHKEY_COLOR_PREFIX:=#ff0044}
YAWHICHKEY_COLOR_KEY=${YAWHICHKEY_COLOR_KEY:=#990000}
YAWHICHKEY_THEME=${YAWHICHKEY_THEME:=${cwd}/themes/dark-which-key}
YAWHICHKEY_KEY_UNDERLINE=${YAWHICHKEY_KEY_UNDERLINE:='false'}
YAWHICHKEY_KEY_BOLD=${YAWHICHKEY_KEY_BOLD:='true'}
YAWHICHKEY_WITH_PREFIX=${YAWHICHKEY_WITH_PREFIX:='true'}
YAWHICHKEY_PREFIX=${YAWHICHKEY_PREFIX:='→'}
YAWHICHKEY_PREFIX_UNDERLINE=${YAWHICHKEY_PREFIX_UNDERLINE:='false'}
YAWHICHKEY_PREFIX_BOLD=${YAWHICHKEY_PREFIX_BOLD:='false'}


key_underline=$YAWHICHKEY_KEY_UNDERLINE
key_bold=$YAWHICHKEY_KEY_BOLD
with_prefix=$YAWHICHKEY_WITH_PREFIX
prefix=$YAWHICHKEY_PREFIX
prefix_underline=$YAWHICHKEY_PREFIX_UNDERLINE
prefix_bold=$YAWHICHKEY_PREFIX_BOLD

# Dependency check

if ! command -v rofi; then
  message="Dependency 'rofi' not installed"
  echoerr "$message"
  notify-send "yawhich-key" "$message"
  exit 1
fi
if ! command -v yq; then
  message="Dependency 'yq' not installed, please get that one from https://github.com/mikefarah/yq (WARNING there is another yq in python but it is too slow, dont install the wrong one)"
  echoerr "$message"
  notify-send "yawhich-key" "$message"
  exit 1
fi


# Functions
function get_color  {
  color=

  if [[ "$1" == "primary" ]]; then
    color=$color_primary
  fi
  if [[ "$1" == "secondary" ]]; then
    color=$color_secondary
  fi

  if [[ ! $color ]]; then
    # Handle themer color with argument name (primary, secondary, ect)
    color=$(grep "$1" "$YAWHICHKEY_THEMER_FILE" |  sed 's/.*#/#/'| sed "s/'//")
  fi

  if [[ ! $color ]]; then
    # Handle pywal color
    if [[ "$1" == "primary" ]]; then
      color=$(head -n 1 "$YAWHICHKEY_PYWAL_FILE")
    fi
    if [[ "$1" == "secondary" ]]; then
      color=$(head -n 2 "$YAWHICHKEY_PYWAL_FILE")
    fi
  fi

  if [[ ! $color ]]; then
    # Then default to a color 
    if [[ "$1" == "primary" ]]; then
      color=$YAWHICHKEY_COLOR_PREFIX
    fi
    if [[ "$1" == "secondary" ]]; then
      color=$YAWHICHKEY_COLOR_KEY
    fi
  fi

  echo "$color"
}


key_color=$(get_color 'secondary')
prefix_color=$(get_color 'primary')


# Turn the menu into well formated
spacei3_which_key_menu_to_pango () {
  # Insert zero-space-width ​ caracter so the highlighted character it will strictly match with the rofi -filter '​'
  # Also highlight the character key with color, bold, underline
  match="​\\2"

  if [[ $key_bold == "true" ]]; then
    match="<b>$match<\/b>"
  fi

  if [[ $key_underline == "true" ]]; then
    match="<u>$match<\/u>"
  fi

  if [[ $key_color ]]; then
    match="<span foreground=\"$key_color\">$match<\/span>"
  fi

  prefix_key=""
  if [[ $with_prefix == "true" ]]; then
    prefix_key="\\2"
    if [[ $prefix_bold == "true" ]]; then
      prefix_key="<b>$prefix_key<\/b>"
    fi

    if [[ $prefix_underline == "true" ]]; then
      prefix_key="<u>$prefix_key<\/u>"
    fi

    if [[ $prefix_color ]]; then
      prefix_key="<span foreground=\"$prefix_color\">$prefix_key<\/span>"
    fi
    prefix_key="$prefix_key $prefix"
  fi

  sed -E "s/(.*)\+(.)(.*)/$prefix_key \1$match\3/g" <<< "$1"
}

# Current window location
# window_x_info=$(xdotool getwindowfocus getwindowgeometry getwindowname)
window_class=$(xprop -id "$(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2)" WM_CLASS | cut -d \" -f2)

# This can be using in the command evaluation
# shellcheck disable=2034
window_id=$(xdotool getwindowfocus)

# Directly convert to a menu, launch rofi and print the selected option
spacei3_which_key_menu () {
  selection=$(spacei3_which_key_menu_to_pango "$1" | eval "$rofi_cmd" ) 
  sed -e 's/<[^>]*>//g' <<< ${selection} | sed "s/.*$prefix//"
}

strip_selection () {
  sed -e 's/​/\+/g' <<< "$1" | sed -e 's/<[^>]*>//g' | sed "s/.* $prefix.//"
}

# Prevent unbound variable by assigning $1 or defaulting to nothin to $arg1
arg1="${1:-}"

# Give the name of the current window class
if [[ "$arg1" == "--major-name" ]]; then
  echo "$window_class"
  exit 0
fi

key_map_filename="${arg1:-$cwd/layers/core.yaml}"

# shellcheck disable=2034
# Adding new layer associated to window class name
new_layer_command="cp -n $cwd/layers/layer-template.yaml $cwd/layers/$window_class.yaml && $editor $cwd/layers/$window_class.yaml"

if [[ "$arg1" == "--major" ]]; then
  key_map_filename="$cwd/layers/$window_class.yaml"

  if [[ ! -f $key_map_filename ]]; then
    notify-send "yawhich-key" "No major mode layer for \"$window_class\", creating a new one..."
    eval "cd $cwd; $new_layer_command" 2> /tmp/yawhich-key-error.log || notify-send yawhich-key "$(cat /tmp/yawhich-key-error.log)"
    echo $window_class
    exit 0
  fi
fi


# Adding new command to current keymap
new_command_keymap='+>new-command'
new_command="$editor $key_map_filename"

if [[ ! "$arg1" == "--major" ]]; then
  # coretmp=$(mktemp)
  # core=$(yq r  --printMode pv ./layers/core.yaml "**" > $coretmp)
  #
  # i3tmp=$(mktemp)
  # i3=$(yq r  --printMode pv ./layers/core-i3.yaml "**" > $i3tmp)
  # key_map_content="$(yq m -a $i3tmp $coretmp)"
  key_map_content="$(yq m -a $key_map_filename $cwd/layers/core.yaml "$config_dir/$layers")"
else
  key_map_content="$(cat "$key_map_filename" )"
fi
# Get keymap file from first argument or use the core one
# key_map=$(echo "$add_new" | cat "$key_map_filename" - )
# key_map_content=$(cat "$key_map_filename")
get_key_names () {
  # echo "get_key_names"
  echo "$1" | yq r - "$2" |\
  yq --printMode pv r - "**" --stripComments |\
  grep -v '.*:$' |\
  sed -e 's/[\.:].*//' |\
  uniq
}


set -x

layer_path_to_pango () {
  # Insert zero-space-width ​ caracter so the highlighted character it will strictly match with the rofi -filter '​'
  # Also highlight the character key with color, bold, underline
  match="​\\2"

  if [[ $key_bold == "true" ]]; then
    match="<b>$match<\/b>"
  fi

  if [[ $key_underline == "true" ]]; then
    match="<u>$match<\/u>"
  fi

  if [[ $key_color ]]; then
    match="<span foreground=\"$key_color\">$match<\/span>"
  fi

  prefix_key=""
  if [[ $with_prefix == "true" ]]; then
    prefix_key="\\2"
    if [[ $prefix_bold == "true" ]]; then
      prefix_key="<b>$prefix<\/b>"
    fi

    if [[ $prefix_underline == "true" ]]; then
      prefix_key="<u>$prefix<\/u>"
    fi

    if [[ $prefix_color ]]; then
      prefix_key="<span foreground=\"$prefix_color\">$prefix<\/span>"
    fi
    prefix_key="$prefix"
  fi

  before=$(sed -E "s/(.*)\+(.)(.*)/\1/g" <<< "$1")
  key=$(sed -E "s/(.*)\+(.)(.*)/\2/g" <<< "$1")
  after=$(sed -E "s/(.*)\+(.)(.*)/\3/g" <<< "$1")

  sed -E "s/(\+.)/<b><u><span foreground=\"$(get_color 'primary')\">\1<\/span><\/u><\/b>/g" <<< "$1" | # Add pango markup around
    sed "s/\.$//g" |                                                                                   # Remove the dot at the end of the path so it doesnt get replaced
    sed "s/\./ $prefix /g" |                                                                           # Swap the dots with the prefix
    sed "s/\+//g"                                                                                      # Remove all the + markers
  # echo "$before$key$after"

}



# Path to follow to get the current map or submap
key_path='keymaps.'

# Will be filled with the command to execute
task_command=

display-yawich-key() {

  # The names of all the commands on each line, the line break at the end is needed to insert the $new_command_keymap
  # the zero space width at the end prevent rofi to auto select when opening a keymap or sub-keymap with only one option
  formated_key_map=$(get_key_names "$key_map_content" "$key_path")"
$new_command_keymap
​ 
"
  # echo "$key_map_content"
  # echo "$formated_key_map"

  # Get the current keymap layer name and add the path to the submenus
  layer_name=$(basename "$key_map_filename" .yaml )
  layer_name="$layer_name.${key_path//keymaps./}"
  # layer_name=$(spacei3_which_key_menu_to_pango "$layer_name")
  # layer_name=$(echo "$layer_name" | sed 's/\.$//' | sed 's/\+./<b>\0<\/b>/g')
  layer_name="$(layer_path_to_pango "$layer_name")"


  # Create rofi command that will be launched with the menu
  rofi_cmd="rofi -dmenu -filter '​' $rofi_options -mesg '$layer_name' -p ''  -no-sort -columns 5 -lines 5 -padding 0 -auto-select -show-icons -location 6 -disable-history -markup-rows -theme $theme"

  # Something weird happen when sorting string with /s, --version-sort is the only option that worked
  selected=$( spacei3_which_key_menu_to_pango "$formated_key_map" | sort --ignore-case --version-sort  | eval "$rofi_cmd")

  # strip the markup and prefix from the selection to get the original key name
  selected_stripped=$( strip_selection "$selected")


  # Update the path to the current key with the new selected one
  key_path=$key_path$selected_stripped.


  # If user want to add a new command instead
  if [[ "$selected_stripped" == "$new_command_keymap" ]]; then
    # line=()
   eval "$new_command"
   exit 0
  fi

  # Get the command string to execute
  task=$(echo "$key_map_content" | yq r - "$key_path")

  # Exit if no task was found
  if [[ $task == "" ]]; then
    notify-send "No task defined as '$selected_stripped' within config file."
    exit 1
  fi

  # Get the command associated with the task name
  # Using yq go
  task_command=$(echo "$task" | yq r - "command")
  echo "$task_command"

  # Check whether we need confirmation to run this task
  # Using yq go
  confirm=$(echo "$task" | yq r - "confirm")

  if [[ $confirm == "true" ]]; then

    # Chain the confirm command before executing the selected command
    confirm_script=$("${cwd}"/yawhich-key "$cwd/layers/confirm.yaml")

    if [ "$confirm_script" == "yes" ]; then
      # Eval the command and display notification if there is errors
      eval "cd $cwd; $task_command" 2> /tmp/yawhich-key-error.log || notify-send yawhich-key "$(cat /tmp/yawhich-key-error.log)"
    fi
  else
    # Eval the command and display notification if there is errors
    eval "cd $cwd; $task_command" 2> /tmp/yawhich-key-error.log || notify-send yawhich-key "$(cat /tmp/yawhich-key-error.log)"
  fi
}

# Run yawhich-key throught submenus until a task is found or exit is done
while [ ! "$task_command" ]; do
  display-yawich-key
done



