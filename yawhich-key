#!/bin/bash
# set -x
set -e
set -u

# Get script directory
cwd=$(echo $(dirname $0))

# User config
terminal="kitty"
terminal_hold="kitty --hold"
editor="$terminal vim"

echoerr() { echo "$@" 1>&2; }
if [ -z "${BROWSER-}" ]; then
 browser="firefox"
  message="no BROWSER env variable found, consider putting it your profile https://wiki.archlinux.org/index.php/Environment_variables\n\nDefaulting to $browser "
  notify-send "yawhich-key" "$message"
else
  browser=$BROWSER
fi



YAWHICHKEY_THEMER_FILE=${YAWHICHKEY_THEMER_FILE:=~/.config/themer/current/colors.yaml}
YAWHICHKEY_PYWAL_FILE=${YAWHICHKEY_PYWAL_FILE:=~/.cache/wal/colors}
YAWHICHKEY_COLOR_PREFIX=${YAWHICHKEY_COLOR_PREFIX:=#ff0044}
YAWHICHKEY_COLOR_KEY=${YAWHICHKEY_COLOR_KEY:=#990000}
YAWHICHKEY_THEME=${YAWHICHKEY_THEME:=${cwd}/themes/dark-which-key}
YAWHICHKEY_KEY_UNDERLINE=${YAWHICHKEY_KEY_UNDERLINE:='false'}
YAWHICHKEY_KEY_BOLD=${YAWHICHKEY_KEY_BOLD:='true'}
YAWHICHKEY_WITH_PREFIX=${YAWHICHKEY_WITH_PREFIX:='true'}
YAWHICHKEY_PREFIX=${YAWHICHKEY_PREFIX:='→'}
YAWHICHKEY_PREFIX_UNDERLINE=${YAWHICHKEY_PREFIX_UNDERLINE:='false'}
YAWHICHKEY_PREFIX_BOLD=${YAWHICHKEY_PREFIX_BOLD:='false'}


key_underline=$YAWHICHKEY_KEY_UNDERLINE
key_bold=$YAWHICHKEY_KEY_BOLD
with_prefix=$YAWHICHKEY_WITH_PREFIX
prefix=$YAWHICHKEY_PREFIX
prefix_underline=$YAWHICHKEY_PREFIX_UNDERLINE
prefix_bold=$YAWHICHKEY_PREFIX_BOLD

# Dependency check

if ! command -v rofi; then
  message="Dependency 'rofi' not installed"
  echoerr "$message"
  notify-send "yawhich-key" "$message"
  exit 1
fi
if ! command -v yq; then
  message="Dependency 'yq' not installed, please get that one from https://github.com/mikefarah/yq (WARNING there is another yq in python but it is too slow, dont install the wrong one)"
  echoerr "$message"
  notify-send "yawhich-key" "$message"
  exit 1
fi


# Functions
function get_color  {
  color=

  if [[ ! $color ]]; then
    # Handle themer color with argument name (primary, secondary, ect)
    color=$(grep "$1" "$YAWHICHKEY_THEMER_FILE" |  sed 's/.*#/#/'| sed "s/'//")
  fi

  if [[ ! $color ]]; then
    # Handle pywal color
    if [[ "$1" == "primary" ]]; then
      color=$(shuf -n 1 "$YAWHICHKEY_PYWAL_FILE")
    fi
    if [[ "$1" == "secondary" ]]; then
      color=$(shuf -n 1 "$YAWHICHKEY_PYWAL_FILE")
    fi
  fi

  if [[ ! $color ]]; then
    # Then default to a color 
    if [[ "$1" == "primary" ]]; then
      color=$YAWHICHKEY_COLOR_PREFIX
    fi
    if [[ "$1" == "secondary" ]]; then
      color=$YAWHICHKEY_COLOR_KEY
    fi
  fi

  echo "$color"
}


key_color=$(get_color 'secondary')
prefix_color=$(get_color 'primary')


# Turn the menu into well formated
spacei3_which_key_menu_to_pango () {
  # Insert zero-space-width ​ caracter so the highlighted character it will strictly match with the rofi -filter '​'
  # Also highlight the character key with color, bold, underline
  match="​\\2"

  if [[ $key_bold == "true" ]]; then
    match="<b>$match<\/b>"
  fi

  if [[ $key_underline == "true" ]]; then
    match="<u>$match<\/u>"
  fi

  if [[ $key_color ]]; then
    match="<span foreground=\"$key_color\">$match<\/span>"
  fi

  prefix_key=""
  if [[ $with_prefix == "true" ]]; then
    prefix_key="\\2"
    if [[ $prefix_bold == "true" ]]; then
      prefix_key="<b>$prefix_key<\/b>"
    fi

    if [[ $prefix_underline == "true" ]]; then
      prefix_key="<u>$prefix_key<\/u>"
    fi

    if [[ $prefix_color ]]; then
      prefix_key="<span foreground=\"$prefix_color\">$prefix_key<\/span>"
    fi
    prefix_key="$prefix_key $prefix"
  fi

  sed -E "s/(.*)\+(.)(.*)/$prefix_key \1$match\3/g" <<< "$1"
}

# Current window location
# window_x_info=$(xdotool getwindowfocus getwindowgeometry getwindowname)
# window_name=$(xdotool getwindowfocus getwindowclass)
window_class=$(xprop -id $(xprop -root 32x '\t$0' _NET_ACTIVE_WINDOW | cut -f 2) WM_CLASS | cut -d \" -f2)

# Create rofi command that will be launched with the menu
rofi_cmd="rofi -dmenu -column 4 -auto-select -show-icons -location 6 -disable-history -filter '​' -markup-rows -theme ${cwd}/themes/dark-which-key"

# Directly convert to a menu, launch rofi and print the selected option
spacei3_which_key_menu () {
  selection=$(spacei3_which_key_menu_to_pango "$1" | eval "$rofi_cmd" ) 
  sed -e 's/<[^>]*>//g' <<< ${selection} | sed "s/.*$prefix//"
}

strip_selection () {
  sed -e 's/​/\+/g' <<< "$1" | sed -e 's/<[^>]*>//g' | sed "s/.* $prefix.//"
}

arg1="${1:-}"

if [[ "$arg1" == "--major-name" ]]; then
  echo $window_class
  exit 0
fi

key_map_file="${arg1:-$cwd/layers/core.yaml}"

if [[ "$arg1" == "--major" ]]; then
  key_map_file="$cwd/layers/$window_class.yaml"

  if [[ ! -f $key_map_file ]]; then
    notify-send "yawhich-key" "No major mode layer for $window_class, you can create a new one with <b>f c n</b>"
    echo $window_class
    exit 0
  fi
fi
# Get keymap file from first argument or use the core one


key_map=$(cat "$key_map_file")

# Pass key_map to rofi, and get the output as the selected option
# Using jq json
# formated_key_map=$(echo "$key_map" | jq -j 'map(.name) | join("\n")')
# Using yq python
# formated_key_map=$(echo "$key_map" | yq -j 'map(.name) | join("\n")')
# Using yq go
formated_key_map=$(echo "$key_map" | yq r - .name)

selected=$( spacei3_which_key_menu_to_pango "$formated_key_map" | sort -n | eval "$rofi_cmd")

selected_stripped=$( strip_selection "$selected")

# Using jq json
# task=$(echo "$key_map" | jq ".[] | select(.name == \"$selected_stripped\")")
# Using yq python
# task=$(echo "$key_map" | yq ".[] | select(.name == \"$selected_stripped\")")
# Using yq go
task=$(echo "$key_map" | yq r - "(**==$selected_stripped)")

# Exit if no task was found
if [[ $task == "" ]]; then
  notify-send "No task defined as '$selected_stripped' within config file."
  exit 1
fi

# Get the command associated with the task name
# Using jq json
# task_command=$(echo "$task" | jq ".command")
# Using yq python
# task_command=$(echo "$task" | yq ".command")
# Using yq go
task_command=$(echo "$task" | yq r - "command")

# Check whether we need confirmation to run this task
# Using jq json
# confirm=$(echo "$task" | jq ".confirm")
# Using yq python
# confirm=$(echo "$task" | yq ".confirm")
# Using yq go
confirm=$(echo "$task" | yq r - "confirm")

if [[ $confirm == "true" ]]; then
  # Chain the confirm command before executing the selected command
  confirm_script=$(${cwd}/yawhich-key ./layers/confirm.yaml)
  if [ $confirm_script == "yes" ]; then
    # Eval the command and display notification if there is errors
    eval "cd $cwd; $task_command" 2> /tmp/yawhich-key-error.log || notify-send yawhich-key "$(cat /tmp/yawhich-key-error.log)"
  fi
else
    # Eval the command and display notification if there is errors
    eval "cd $cwd; $task_command" 2> /tmp/yawhich-key-error.log || notify-send yawhich-key "$(cat /tmp/yawhich-key-error.log)"
fi
